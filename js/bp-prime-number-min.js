function PrimeNumber(){this._knownPrimes=[1,2],this._startingNumber=void 0}PrimeNumber.prototype={isPrimeNumber:function(r){return this._calculatePrimeNumber(r,!0)},_calculatePrimeNumber:function(r,i){var e=!0;if(this._isPrimeNumberOneOrTwo(r))return!0;if(this._isPrimeNumberEven(r))return!1;for(knownPrimeNumber in self._knownPrimes){if(knownPrimeNumber==r)return!0;if(this._isPrimeNumberDivisible(r,knownPrimeNumber))return!1}this._setStartingNumber();for(var t=this._getSquareRoot(r);this._startingNumber<=t;){if(this._isPrimeNumberDivisible(r,this._startingNumber))return!1;this._incStartingNumber(i)}return this._knownPrimes.push(r),e},_isTheNewNumberPrime:function(r){r&&this._calculatePrimeNumber(this._startingNumber,!1)&&this._knownPrimes.push(this._startingNumber)},_isPrimeNumberDivisible:function(r,i){return 1!=i&&r%i==0},_isPrimeNumberEven:function(r){return!this._isNumber(r)||r%2==0},_isPrimeNumberOneOrTwo:function(r){return 1==r||2==r},_incStartingNumber:function(r){this._isTheNewNumberPrime(r),this._startingNumber+=this._startingNumber>2?2:1},_isNumber:function(r){return!isNaN(parseInt(r,10))&&parseFloat(r,10)==parseInt(r,10)&&isFinite(r)&&r>=0},_setStartingNumber:function(){if(0==this._knownPrimes.length)this._startingNumber=1;else{var r=this._knownPrimes.sort(function(r,i){return r-i});this._startingNumber=r[r.length-1]}},_getSquareRoot:function(r){return Math.floor(Math.sqrt(r))}};
