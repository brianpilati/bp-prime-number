function PrimeNumber(){this._knownPrimes=[1,2],this._startingNumber=void 0}PrimeNumber.prototype={isPrimeNumber:function(i){return this._calculatePrimeNumber(i,!0)},_calculatePrimeNumber:function(i,r){var t=!0;if(this._isPrimeNumberOneOrTwo(i))return!0;if(this._isPrimeNumberEven(i))return!1;for(var e in this._knownPrimes){var n=this._knownPrimes[e];if(n==i)return!0;if(this._isPrimeNumberDivisible(i,n))return!1}this._setStartingNumber();for(var s=this._getSquareRoot(i);this._startingNumber<=s;){if(this._isPrimeNumberDivisible(i,this._startingNumber))return!1;this._incStartingNumber(r)}return this._knownPrimes.push(i),t},_isTheNewNumberPrime:function(i){i&&this._calculatePrimeNumber(this._startingNumber,!1)&&this._knownPrimes.push(this._startingNumber)},_isPrimeNumberDivisible:function(i,r){return 1!=r&&i%r==0},_isPrimeNumberEven:function(i){return!this._isNumber(i)||i%2==0},_isPrimeNumberOneOrTwo:function(i){return 1==i||2==i},_incStartingNumber:function(i){this._isTheNewNumberPrime(i),this._startingNumber+=this._startingNumber>2?2:1},_isNumber:function(i){return!isNaN(parseInt(i,10))&&parseFloat(i,10)==parseInt(i,10)&&isFinite(i)&&i>=0},_setStartingNumber:function(){if(2==this._knownPrimes.length)this._startingNumber=3;else{var i=this._knownPrimes.sort(function(i,r){return i-r});this._startingNumber=i[i.length-1]}},_getSquareRoot:function(i){return Math.floor(Math.sqrt(i))}};